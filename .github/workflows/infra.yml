name: Infrastructure Automation

on:
  push:
    branches:
      - main
  workflow_dispatch:
  pull_request:
    branches:
      - main

jobs:
  fmt:
    name: Terraform Format
    runs-on: ubuntu-latest
    permissions:
      contents: write
    defaults:
      run:
        working-directory: Terraform
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      - name: Terraform Format Check
        id: fmt_check
        run: terraform fmt -check
        continue-on-error: true
      - name: Terraform Format and Commit
        if: steps.fmt_check.outcome != 'success'
        run: |
          terraform fmt
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'actions@github.com'
          git add .
          git commit -m "Auto-formatted Terraform code"
      - name: Push changes
        if: steps.fmt_check.outcome != 'success' && !contains(github.event.head_commit.message, 'Auto-formatted Terraform code')
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}

  validate:
    name: Terraform Validate
    needs: fmt
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: Terraform
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      - name: Terraform Init
        run: terraform init
      - name: Terraform Validate
        run: terraform validate

  plan:
    name: Terraform Plan
    needs: validate
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: Terraform
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      - name: Terraform Init
        run: terraform init
      - name: Terraform Plan
        id: plan
        run: terraform plan -out=tfplan -var="ec2_key_name=${{ secrets.INSTANCE_KEY_NAME }}"
      - name: Upload Plan
        uses: actions/upload-artifact@v3
        with:
          name: tfplan
          path: Terraform/tfplan
    
  apply:
    name: Terraform Apply
    needs: plan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: Terraform
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Download Plan
        uses: actions/download-artifact@v3
        with:
          name: tfplan
          path: Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      - name: Terraform Init
        run: terraform init
      - name: Terraform Apply
        run: terraform apply tfplan
        env:
          TF_VAR_ec2_key_name: ${{ secrets.INSTANCE_KEY_NAME }}
      # - name: Get outputs
      #   id: get-outputs
      #   run: |
      #     echo "Running Get outputs step"
      #     VM_PUBLIC_IP_RAW=$(terraform output -raw vm_public_ip)
      #     echo "VM_PUBLIC_IP_RAW: $VM_PUBLIC_IP_RAW"
      #     DB_ENDPOINT_RAW=$(terraform output -raw db_endpoint)
      #     echo "DB_ENDPOINT_RAW: $DB_ENDPOINT_RAW"

      #     VM_PUBLIC_IP=$(echo "$VM_PUBLIC_IP_RAW" | sed 's/.*\[command\].*terraform-bin output -raw vm_public_ip//' | sed 's/::debug::Terraform exited with code 0.//' | awk '{print $1}' | tr -d '\n' | sed 's/::debug::stdout:::debug::stderr:::debug::exitcode:$//')
      #     DB_ENDPOINT=$(echo "$DB_ENDPOINT_RAW" | sed 's/.*\[command\].*terraform-bin output -raw db_endpoint//' | sed 's/::debug::Terraform exited with code 0.//' | awk '{print $1}' | tr -d '\n' | sed 's/::debug::stdout:::debug::stderr:::debug::exitcode:$//')

      #     echo "VM_PUBLIC_IP: $VM_PUBLIC_IP"
      #     echo "DB_ENDPOINT: $DB_ENDPOINT"

      #     printf "vm_public_ip=%s\n" "$VM_PUBLIC_IP" >> "$GITHUB_OUTPUT"
      #     printf "db_endpoint=%s\n" "$DB_ENDPOINT" >> "$GITHUB_OUTPUT"
      #     echo "Finished Get outputs step"
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install jq -y
      - name: Get outputs
        id: get-outputs
        run: |
          output=$(terraform output -json)
          echo "vm_public_ip=$(echo "$output" | jq -r '.vm_public_ip.value')" >> $GITHUB_OUTPUT
          echo "db_endpoint=$(echo "$output" | jq -r '.db_endpoint.value')" >> $GITHUB_OUTPUT
      - name: Store Outputs in Parameter Store
        run: |
          aws ssm put-parameter --name "/myapp/ec2_public_ip" --value "${{ steps.get-outputs.outputs.vm_public_ip }}" --type "String" --overwrite
          aws ssm put-parameter --name "/myapp/db_endpoint" --value "${{ steps.get-outputs.outputs.db_endpoint }}" --type "String" --overwrite
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ vars.AWS_REGION }}
    
    outputs:
      vm_public_ip: ${{ steps.get-outputs.outputs.vm_public_ip }}
      db_endpoint: ${{ steps.get-outputs.outputs.db_endpoint }}

  ansible:
    name: Ansible Provision
    needs: apply
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Ansible
        run: pip install ansible

      - name: Create SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/${{secrets.SSH_PRIVATE_KEY_NAME}}.pem
          chmod 600 ~/.ssh/${{secrets.SSH_PRIVATE_KEY_NAME}}.pem
      - name: Configure Ansible Inventory
        run: |
          echo "[servers]" > inventory
          echo "app_server ansible_host=${{ needs.apply.outputs.vm_public_ip }} ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/${{secrets.SSH_PRIVATE_KEY_NAME}}.pem ansible_ssh_common_args='-o StrictHostKeyChecking=no'" >> inventory
      - name: Run Ansible Playbook
        run: |
          ansible-playbook -i inventory Ansible/main.yaml
        env:
          ANSIBLE_PRIVATE_KEY_FILE: ${{secrets.SSH_PRIVATE_KEY}}


  destroy:
    name: Terraform Destroy
    needs: apply
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    defaults:
      run:
        working-directory: Terraform
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      - name: Terraform Init
        run: terraform init
      - name: Terraform Destroy
        run: terraform destroy -auto-approve
        
 
