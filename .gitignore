# Local .terraform directories
**/.terraform/*

# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
crash.log
crash.*.log
db_query.sh

# Exclude all .tfvars files, which are likely to contain sensitive data, such as
# password, private keys, and other secrets. These should not be part of version 
# control as they are data points which are potentially sensitive and subject 
# to change depending on the environment.
# *.tfvars
# *.tfvars.json

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Ignore transient lock info files created by terraform apply
.terraform.tfstate.lock.info

# Include override files you do wish to add to version control using negated pattern
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc


#Ansible

# Ignore Vault files (encrypted files)
*.vault
*.vault.yml
*.vault.yaml

# Ignore sensitive files (e.g., passwords, keys)
*.key
*.pem
*.cert
*.secret
.env
secrets.yml
vault.yml

# Ignore local configuration files
ansible.cfg.local
inventory/local

# Ignore temporary files
*.retry
*.tmp
*.swp
*.bak

# Ignore directories
.venv/
.ansible/
.idea/
.vscode/
__pycache__/
*.egg-info/
dist/
build/

# Ignore log files
*.log
logs/

# Ignore Ansible Galaxy roles
roles/
!roles/requirements.yml

# Ignore downloaded files or archives
*.tar.gz
*.zip

# Ignore Python virtual environment files
venv/
.env/